#ifndef H2ZMU_2_DISPLAY_H
#define H2ZMU_2_DISPLAY_H

#include <memory>
#include "interface/hmi/Gui.h"

class Display {

private:
    std::vector<uint8_t> cacheData = {};
    bool inverted = false;
    bool cache = false;
    void setFont();
    void getDateTime();

    std::map<enum gui_icon, std::tuple<int, std::vector<uint8_t>>> icons {
            // bitmap image size is 24*24 pixel
            // enum gui_icon, {int line, vector data}
            {gui_icon::ALARM,       {0, {0xff, 0xbd, 0xff, 0xf7, 0xbd, 0xef, 0xfb, 0xbd, 0xdf, 0xfd, 0xff, 0xbf, 0xff, 0x81, 0xff, 0xfe, 0x18, 0x7f, 0x8c, 0x7e, 0x31, 0xf9, 0xff, 0x9f, 0xf9, 0xff, 0x9f, 0xf9, 0xff, 0x9f, 0xf9, 0xff, 0x9f, 0xf9, 0xff, 0x9f, 0xf1, 0xff, 0x8f, 0xf1, 0xff, 0x8f, 0xf3, 0xff, 0xcf, 0xf3, 0xff, 0xcf, 0xf3, 0xff, 0xcf, 0xf3, 0xff, 0xcf, 0xf3, 0xff, 0xcf, 0xf3, 0xff, 0xcf, 0xf3, 0xff, 0xcf, 0xf3, 0xff, 0xcf, 0xc0, 0x00, 0x03, 0x80, 0x00, 0x01}}},
            {gui_icon::GAUGE,       {1, {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x81, 0xff, 0xfe, 0x00, 0x7f, 0xf8, 0x18, 0x1f, 0xf0, 0xdb, 0x0f, 0xe3, 0x7e, 0xc7, 0xc5, 0xbd, 0xa3, 0x8e, 0xff, 0x71, 0x97, 0xef, 0xe9, 0x9b, 0xef, 0xd9, 0x9f, 0xef, 0xf9, 0x87, 0xef, 0xe1, 0x9f, 0xef, 0xf9, 0xff, 0xef, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}}},
            {gui_icon::SIGNAL,      {2, {0xfd, 0xff, 0xbf, 0xfb, 0xff, 0xdf, 0xf6, 0xff, 0x6f, 0xed, 0xbd, 0xb7, 0xeb, 0x66, 0xd7, 0xeb, 0x66, 0xd7, 0xeb, 0xbd, 0xd7, 0xed, 0xe7, 0xb7, 0xf6, 0x81, 0x6f, 0xfb, 0x99, 0xdf, 0xfd, 0x18, 0xbf, 0xff, 0x24, 0xff, 0xfe, 0x66, 0x7f, 0xfe, 0x5a, 0x7f, 0xfc, 0xbd, 0x3f, 0xfc, 0x7e, 0x3f, 0xf9, 0x3c, 0x9f, 0xf9, 0x93, 0x9f, 0xf3, 0xc7, 0xcf, 0xf3, 0x11, 0xcf, 0xe6, 0x7c, 0xe7, 0xc4, 0xff, 0x23, 0xc9, 0xff, 0x93, 0xc3, 0xff, 0xc3}}},
            {gui_icon::LOCK_OPEN,   {3, {0xff, 0xc3, 0xff, 0xfe, 0x18, 0x7f, 0xf8, 0x7e, 0x1f, 0xf1, 0xff, 0x8f, 0xf3, 0xff, 0xcf, 0xf3, 0xff, 0xcf, 0xf3, 0xff, 0xef, 0xf3, 0xff, 0xcf, 0xf3, 0xff, 0xff, 0xf3, 0xff, 0xff, 0x80, 0x00, 0x01, 0x80, 0x00, 0x01, 0x87, 0xff, 0xe1, 0x8f, 0xe7, 0xf1, 0x9f, 0xdb, 0xf9, 0x9f, 0xc3, 0xf9, 0x9f, 0xe7, 0xf9, 0x9f, 0xe7, 0xf9, 0x9f, 0xe7, 0xf9, 0x9f, 0xe7, 0xf9, 0x8f, 0xff, 0xf1, 0x87, 0xff, 0xe1, 0x80, 0x00, 0x01, 0x80, 0x00, 0x01}}},
            {gui_icon::LOCK_CLOSED, {4, {0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xfc, 0x3c, 0x3f, 0xf8, 0xff, 0x1f, 0xf1, 0xff, 0x8f, 0xf3, 0xff, 0xcf, 0xf3, 0xff, 0xcf, 0xf3, 0xff, 0xcf, 0xf3, 0xff, 0xcf, 0xf3, 0xff, 0xcf, 0x80, 0x00, 0x01, 0x80, 0x00, 0x01, 0x87, 0xff, 0xe1, 0x8f, 0xe7, 0xf1, 0x9f, 0xdb, 0xf9, 0x9f, 0xc3, 0xf9, 0x9f, 0xe7, 0xf9, 0x9f, 0xe7, 0xf9, 0x9f, 0xe7, 0xf9, 0x9f, 0xe7, 0xf9, 0x8f, 0xff, 0xf1, 0x87, 0xff, 0xe1, 0x80, 0x00, 0x01, 0x80, 0x00, 0x00}}},
            {gui_icon::BLANK,       {0, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}}}
    };

public:
    static std::shared_ptr<Display> instance;
    int initDisplay();
    void clearFullDisplay();
    void clearMainScreen();
    void clearIndicatorScreen();
    void writeString(std::string message, uint8_t x, uint8_t line);
    void setCaching(bool caching);
    void setInverted(bool invert);
    void flushCached();
    void drawBitmap(gui_icon image);
    void clearBitmapArea(gui_icon image);
};

#endif //H2ZMU_2_DISPLAY_H