[ 2023-11-02 20:20:14.425 ] - [ DEBUG ] - [   sql  ] - thrown at std::string DatabaseService::iExecuteSqlReturn(const string&) | interface 0 | message: SQL: "SELECT max(version) FROM migrations;" erfolgreich ausgeführt
[ 2023-11-02 20:20:14.425 ] - [ DEBUG ] - [   sql  ] - thrown at std::string DatabaseService::iExecuteSqlReturn(const string&) | interface 0 | message: SQL: "select max(id) as id from bottles;" erfolgreich ausgeführt
[ 2023-11-02 20:20:14.425 ] - [ DEBUG ] - [   sql  ] - thrown at std::string DatabaseService::iExecuteSqlReturn(const string&) | interface 0 | message: SQL: "SELECT * FROM bottles;" erfolgreich ausgeführt
[ 2023-11-02 20:20:14.425 ] - [ DEBUG ] - [   sql  ] - thrown at std::string DatabaseService::iExecuteSqlReturn(const string&) | interface 0 | message: SQL: "select max(id) as id from cascades;" erfolgreich ausgeführt
[ 2023-11-02 20:20:14.425 ] - [ DEBUG ] - [   sql  ] - thrown at std::string DatabaseService::iExecuteSqlReturn(const string&) | interface 0 | message: SQL: "SELECT * FROM cascades;" erfolgreich ausgeführt
[ 2023-11-02 20:20:14.425 ] - [ DEBUG ] - [   sql  ] - thrown at std::string DatabaseService::iExecuteSqlReturn(const string&) | interface 0 | message: SQL: "select max(id) as id from cascadestate;" erfolgreich ausgeführt
[ 2023-11-02 20:20:14.426 ] - [ DEBUG ] - [   sql  ] - thrown at std::string DatabaseService::iExecuteSqlReturn(const string&) | interface 0 | message: SQL: "SELECT * FROM cascadestate;" erfolgreich ausgeführt
[ 2023-11-02 20:20:14.426 ] - [ DEBUG ] - [   sql  ] - thrown at std::string DatabaseService::iExecuteSqlReturn(const string&) | interface 0 | message: SQL: "select max(id) as id from errors;" erfolgreich ausgeführt
[ 2023-11-02 20:20:14.426 ] - [ DEBUG ] - [   sql  ] - thrown at std::string DatabaseService::iExecuteSqlReturn(const string&) | interface 0 | message: SQL: "SELECT * FROM v_errors_translations_mapped;" erfolgreich ausgeführt
[ 2023-11-02 20:20:14.426 ] - [ DEBUG ] - [   sql  ] - thrown at std::string DatabaseService::iExecuteSqlReturn(const string&) | interface 0 | message: SQL: "select max(id) as id from warnings;" erfolgreich ausgeführt
[ 2023-11-02 20:20:14.426 ] - [ DEBUG ] - [   sql  ] - thrown at std::string DatabaseService::iExecuteSqlReturn(const string&) | interface 0 | message: SQL: "SELECT * FROM v_warnings_translations_mapped;" erfolgreich ausgeführt
[ 2023-11-02 20:20:14.427 ] - [ DEBUG ] - [   sql  ] - thrown at std::string DatabaseService::iExecuteSqlReturn(const string&) | interface 0 | message: SQL: "select max(id) as id from hardwareprotocols;" erfolgreich ausgeführt
[ 2023-11-02 20:20:14.427 ] - [ DEBUG ] - [   sql  ] - thrown at std::string DatabaseService::iExecuteSqlReturn(const string&) | interface 0 | message: SQL: "SELECT * FROM hardwareprotocols;" erfolgreich ausgeführt
[ 2023-11-02 20:20:14.427 ] - [ DEBUG ] - [   sql  ] - thrown at std::string DatabaseService::iExecuteSqlReturn(const string&) | interface 0 | message: SQL: "select max(id) as id from measurement;" erfolgreich ausgeführt
[ 2023-11-02 20:20:14.427 ] - [ DEBUG ] - [   sql  ] - thrown at std::string DatabaseService::iExecuteSqlReturn(const string&) | interface 0 | message: SQL: "SELECT * FROM measurement;" erfolgreich ausgeführt
[ 2023-11-02 20:20:14.427 ] - [ DEBUG ] - [   sql  ] - thrown at std::string DatabaseService::iExecuteSqlReturn(const string&) | interface 0 | message: SQL: "select max(id) as id from occurrederrors;" erfolgreich ausgeführt
[ 2023-11-02 20:20:14.427 ] - [ DEBUG ] - [   sql  ] - thrown at std::string DatabaseService::iExecuteSqlReturn(const string&) | interface 0 | message: SQL: "SELECT * FROM occurrederrors;" erfolgreich ausgeführt
[ 2023-11-02 20:20:14.427 ] - [ DEBUG ] - [   sql  ] - thrown at std::string DatabaseService::iExecuteSqlReturn(const string&) | interface 0 | message: SQL: "select max(id) as id from occurredwarnings;" erfolgreich ausgeführt
[ 2023-11-02 20:20:14.427 ] - [ DEBUG ] - [   sql  ] - thrown at std::string DatabaseService::iExecuteSqlReturn(const string&) | interface 0 | message: SQL: "SELECT * FROM occurredwarnings;" erfolgreich ausgeführt
[ 2023-11-02 20:20:14.427 ] - [ DEBUG ] - [   sql  ] - thrown at std::string DatabaseService::iExecuteSqlReturn(const string&) | interface 0 | message: SQL: "select max(id) as id from params;" erfolgreich ausgeführt
[ 2023-11-02 20:20:14.427 ] - [ DEBUG ] - [   sql  ] - thrown at std::string DatabaseService::iExecuteSqlReturn(const string&) | interface 0 | message: SQL: "SELECT * FROM v_params_translations_mapped;" erfolgreich ausgeführt
[ 2023-11-02 20:20:14.428 ] - [ DEBUG ] - [   sql  ] - thrown at std::string DatabaseService::iExecuteSqlReturn(const string&) | interface 0 | message: SQL: "SELECT fk_param, fk_user, max(timeset), value from paramstate group by fk_param;" erfolgreich ausgeführt
[ 2023-11-02 20:20:14.431 ] - [ DEBUG ] - [   sql  ] - thrown at std::string DatabaseService::iExecuteSqlReturn(const string&) | interface 0 | message: SQL: "select max(id) as id from sensors;" erfolgreich ausgeführt
[ 2023-11-02 20:20:14.431 ] - [ DEBUG ] - [   sql  ] - thrown at std::string DatabaseService::iExecuteSqlReturn(const string&) | interface 0 | message: SQL: "SELECT * FROM sensors;" erfolgreich ausgeführt
[ 2023-11-02 20:20:14.431 ] - [ DEBUG ] - [   sql  ] - thrown at std::string DatabaseService::iExecuteSqlReturn(const string&) | interface 0 | message: SQL: "select max(id) as id from sensorstate;" erfolgreich ausgeführt
[ 2023-11-02 20:20:14.431 ] - [ DEBUG ] - [   sql  ] - thrown at std::string DatabaseService::iExecuteSqlReturn(const string&) | interface 0 | message: SQL: "SELECT * FROM sensorstate;" erfolgreich ausgeführt
[ 2023-11-02 20:20:14.432 ] - [ DEBUG ] - [   sql  ] - thrown at std::string DatabaseService::iExecuteSqlReturn(const string&) | interface 0 | message: SQL: "select max(id) as id from translations;" erfolgreich ausgeführt
[ 2023-11-02 20:20:14.432 ] - [ DEBUG ] - [   sql  ] - thrown at std::string DatabaseService::iExecuteSqlReturn(const string&) | interface 0 | message: SQL: "SELECT * FROM textblocks" erfolgreich ausgeführt
[ 2023-11-02 20:20:14.432 ] - [ DEBUG ] - [   sql  ] - thrown at std::string DatabaseService::iExecuteSqlReturn(const string&) | interface 0 | message: SQL: "SELECT * FROM translations" erfolgreich ausgeführt
[ 2023-11-02 20:20:14.433 ] - [ DEBUG ] - [   sql  ] - thrown at std::string DatabaseService::iExecuteSqlReturn(const string&) | interface 0 | message: SQL: "select max(id) as id from users;" erfolgreich ausgeführt
[ 2023-11-02 20:20:14.433 ] - [ DEBUG ] - [   sql  ] - thrown at std::string DatabaseService::iExecuteSqlReturn(const string&) | interface 0 | message: SQL: "SELECT * FROM users" erfolgreich ausgeführt
[ 2023-11-02 20:20:14.433 ] - [ DEBUG ] - [   sql  ] - thrown at std::string DatabaseService::iExecuteSqlReturn(const string&) | interface 0 | message: SQL: "select max(id) as id from vesselstate;" erfolgreich ausgeführt
[ 2023-11-02 20:20:14.433 ] - [ DEBUG ] - [   sql  ] - thrown at std::string DatabaseService::iExecuteSqlReturn(const string&) | interface 0 | message: SQL: "SELECT * FROM vesselstate;" erfolgreich ausgeführt
[ 2023-11-02 20:20:17.614 ] - [ DEBUG ] - [   sql  ] - thrown at bool DatabaseService::iExecuteSql(const string&) | interface 0 | message: SQL: "insert into measurement ('id', 'valid', 'ts_start', 'ext_measure_id', 'fk_user') values ('6', 'FALSE', '2023-11-02 20:20:17', 'Test', '0');" erfolgreich ausgeführt
[ 2023-11-02 20:20:17.614 ] - [ DEBUG ] - [   sql  ] - thrown at std::string DatabaseService::iExecuteSqlReturn(const string&) | interface 0 | message: SQL: "SELECT * FROM sensorstate;" erfolgreich ausgeführt
[ 2023-11-02 20:20:17.616 ] - [ DEBUG ] - [   sql  ] - thrown at bool DatabaseService::iExecuteSql(const string&) | interface 0 | message: SQL: "insert into sensorstate ('id', 'fk_sensor', 'fk_cstate', 'value', 'value_raw', 'timestamp') values ('64', '0', '32', '15.3', '0', '2023-11-02 20:20:17.17');" erfolgreich ausgeführt
[ 2023-11-02 20:20:17.616 ] - [ DEBUG ] - [   sql  ] - thrown at std::string DatabaseService::iExecuteSqlReturn(const string&) | interface 0 | message: SQL: "SELECT * FROM sensorstate;" erfolgreich ausgeführt
[ 2023-11-02 20:20:17.618 ] - [ DEBUG ] - [   sql  ] - thrown at bool DatabaseService::iExecuteSql(const string&) | interface 0 | message: SQL: "insert into sensorstate ('id', 'fk_sensor', 'fk_cstate', 'value', 'value_raw', 'timestamp') values ('65', '4', '32', '22.1', '0', '2023-11-02 20:20:17.17');" erfolgreich ausgeführt
[ 2023-11-02 20:20:17.619 ] - [ DEBUG ] - [   sql  ] - thrown at std::string DatabaseService::iExecuteSqlReturn(const string&) | interface 0 | message: SQL: "SELECT * FROM cascadestate;" erfolgreich ausgeführt
[ 2023-11-02 20:20:17.621 ] - [ DEBUG ] - [   sql  ] - thrown at bool DatabaseService::iExecuteSql(const string&) | interface 0 | message: SQL: "insert into cascadestate ('id', 'fk_vesselstate', 'fk_cascade', 'nm3') values ('32', '8', '1', '5.06379');" erfolgreich ausgeführt
[ 2023-11-02 20:20:17.621 ] - [ DEBUG ] - [   sql  ] - thrown at std::string DatabaseService::iExecuteSqlReturn(const string&) | interface 0 | message: SQL: "SELECT * FROM sensorstate;" erfolgreich ausgeführt
[ 2023-11-02 20:20:17.623 ] - [ DEBUG ] - [   sql  ] - thrown at bool DatabaseService::iExecuteSql(const string&) | interface 0 | message: SQL: "insert into sensorstate ('id', 'fk_sensor', 'fk_cstate', 'value', 'value_raw', 'timestamp') values ('66', '0', '33', '15.3', '0', '2023-11-02 20:20:17.17');" erfolgreich ausgeführt
[ 2023-11-02 20:20:17.624 ] - [ DEBUG ] - [   sql  ] - thrown at std::string DatabaseService::iExecuteSqlReturn(const string&) | interface 0 | message: SQL: "SELECT * FROM sensorstate;" erfolgreich ausgeführt
[ 2023-11-02 20:20:17.626 ] - [ DEBUG ] - [   sql  ] - thrown at bool DatabaseService::iExecuteSql(const string&) | interface 0 | message: SQL: "insert into sensorstate ('id', 'fk_sensor', 'fk_cstate', 'value', 'value_raw', 'timestamp') values ('67', '5', '33', '20.5', '0', '2023-11-02 20:20:17.17');" erfolgreich ausgeführt
[ 2023-11-02 20:20:17.627 ] - [ DEBUG ] - [   sql  ] - thrown at std::string DatabaseService::iExecuteSqlReturn(const string&) | interface 0 | message: SQL: "SELECT * FROM cascadestate;" erfolgreich ausgeführt
[ 2023-11-02 20:20:17.629 ] - [ DEBUG ] - [   sql  ] - thrown at bool DatabaseService::iExecuteSql(const string&) | interface 0 | message: SQL: "insert into cascadestate ('id', 'fk_vesselstate', 'fk_cascade', 'nm3') values ('33', '8', '2', '5.09124');" erfolgreich ausgeführt
[ 2023-11-02 20:20:17.630 ] - [ DEBUG ] - [   sql  ] - thrown at std::string DatabaseService::iExecuteSqlReturn(const string&) | interface 0 | message: SQL: "SELECT * FROM sensorstate;" erfolgreich ausgeführt
[ 2023-11-02 20:20:17.632 ] - [ DEBUG ] - [   sql  ] - thrown at bool DatabaseService::iExecuteSql(const string&) | interface 0 | message: SQL: "insert into sensorstate ('id', 'fk_sensor', 'fk_cstate', 'value', 'value_raw', 'timestamp') values ('68', '0', '34', '15.3', '0', '2023-11-02 20:20:17.17');" erfolgreich ausgeführt
[ 2023-11-02 20:20:17.633 ] - [ DEBUG ] - [   sql  ] - thrown at std::string DatabaseService::iExecuteSqlReturn(const string&) | interface 0 | message: SQL: "SELECT * FROM sensorstate;" erfolgreich ausgeführt
[ 2023-11-02 20:20:17.636 ] - [ DEBUG ] - [   sql  ] - thrown at bool DatabaseService::iExecuteSql(const string&) | interface 0 | message: SQL: "insert into sensorstate ('id', 'fk_sensor', 'fk_cstate', 'value', 'value_raw', 'timestamp') values ('69', '6', '34', '22.1', '0', '2023-11-02 20:20:17.17');" erfolgreich ausgeführt
[ 2023-11-02 20:20:17.636 ] - [ DEBUG ] - [   sql  ] - thrown at std::string DatabaseService::iExecuteSqlReturn(const string&) | interface 0 | message: SQL: "SELECT * FROM cascadestate;" erfolgreich ausgeführt
[ 2023-11-02 20:20:17.638 ] - [ DEBUG ] - [   sql  ] - thrown at bool DatabaseService::iExecuteSql(const string&) | interface 0 | message: SQL: "insert into cascadestate ('id', 'fk_vesselstate', 'fk_cascade', 'nm3') values ('34', '8', '3', '5.06379');" erfolgreich ausgeführt
[ 2023-11-02 20:20:17.639 ] - [ DEBUG ] - [   sql  ] - thrown at std::string DatabaseService::iExecuteSqlReturn(const string&) | interface 0 | message: SQL: "SELECT * FROM sensorstate;" erfolgreich ausgeführt
[ 2023-11-02 20:20:17.642 ] - [ DEBUG ] - [   sql  ] - thrown at bool DatabaseService::iExecuteSql(const string&) | interface 0 | message: SQL: "insert into sensorstate ('id', 'fk_sensor', 'fk_cstate', 'value', 'value_raw', 'timestamp') values ('70', '0', '35', '15.3', '0', '2023-11-02 20:20:17.17');" erfolgreich ausgeführt
[ 2023-11-02 20:20:17.642 ] - [ DEBUG ] - [   sql  ] - thrown at std::string DatabaseService::iExecuteSqlReturn(const string&) | interface 0 | message: SQL: "SELECT * FROM sensorstate;" erfolgreich ausgeführt
[ 2023-11-02 20:20:17.646 ] - [ DEBUG ] - [   sql  ] - thrown at bool DatabaseService::iExecuteSql(const string&) | interface 0 | message: SQL: "insert into sensorstate ('id', 'fk_sensor', 'fk_cstate', 'value', 'value_raw', 'timestamp') values ('71', '7', '35', '20.5', '0', '2023-11-02 20:20:17.17');" erfolgreich ausgeführt
[ 2023-11-02 20:20:17.646 ] - [ DEBUG ] - [   sql  ] - thrown at std::string DatabaseService::iExecuteSqlReturn(const string&) | interface 0 | message: SQL: "SELECT * FROM cascadestate;" erfolgreich ausgeführt
[ 2023-11-02 20:20:17.648 ] - [ DEBUG ] - [   sql  ] - thrown at bool DatabaseService::iExecuteSql(const string&) | interface 0 | message: SQL: "insert into cascadestate ('id', 'fk_vesselstate', 'fk_cascade', 'nm3') values ('35', '8', '4', '5.09124');" erfolgreich ausgeführt
[ 2023-11-02 20:20:17.648 ] - [ DEBUG ] - [   sql  ] - thrown at std::string DatabaseService::iExecuteSqlReturn(const string&) | interface 0 | message: SQL: "SELECT * FROM vesselstate;" erfolgreich ausgeführt
[ 2023-11-02 20:20:17.650 ] - [ DEBUG ] - [   sql  ] - thrown at bool DatabaseService::iExecuteSql(const string&) | interface 0 | message: SQL: "INSERT INTO vesselstate (id) values ('8');" erfolgreich ausgeführt
[ 2023-11-02 20:20:17.651 ] - [ DEBUG ] - [   sql  ] - thrown at bool DatabaseService::iExecuteSql(const string&) | interface 0 | message: SQL: "update measurement set fk_vesselstate_start = '8'where id = 6;" erfolgreich ausgeführt
